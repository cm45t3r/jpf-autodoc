name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    
    - name: Clone jpf-core
      run: |
        cd ..
        git clone https://github.com/javapathfinder/jpf-core.git
        cd jpf-core
        chmod +x gradlew
        ls -la
    
    - name: Build jpf-core with Java 11
      run: |
        cd ../jpf-core
        pwd
        ls -la
        ./gradlew buildJars --info
    
    - name: Check jpf-core build output
      run: |
        cd ../jpf-core
        echo "=== Build directory contents ==="
        ls -la build/
        echo "=== Available JAR files ==="
        find build/ -name "*.jar" -type f
    
    - name: Copy jpf-core JAR to expected location
      run: |
        cd ../jpf-core
        mkdir -p build/libs
        cp build/jpf.jar build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
        ls -la build/libs/
    
    - name: Create site.properties for CI
      run: |
        cd ../jpf-autodoc
        echo "jpf-core = ../jpf-core" > site.properties
        echo "Created site.properties:"
        cat site.properties
    
    - name: Verify jpf-core JAR exists
      run: |
        ls -la ../jpf-core/build/libs/
        test -f ../jpf-core/build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Run integration tests
      run: ./gradlew integrationTest
    
    - name: Run performance tests
      run: ./gradlew performanceTest
    
    - name: Build distribution
      run: ./gradlew createExecutableJar distZip
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jpf-autodoc-build
        path: |
          build/libs/
          build/distributions/
        retention-days: 7

  quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    
    - name: Clone jpf-core
      run: |
        cd ..
        git clone https://github.com/javapathfinder/jpf-core.git
        cd jpf-core
        chmod +x gradlew
        ls -la
    
    - name: Build jpf-core
      run: |
        cd ../jpf-core
        pwd
        ls -la
        ./gradlew buildJars --info
    
    - name: Check jpf-core build output
      run: |
        cd ../jpf-core
        echo "=== Build directory contents ==="
        ls -la build/
        echo "=== Available JAR files ==="
        find build/ -name "*.jar" -type f
    
    - name: Copy jpf-core JAR to expected location
      run: |
        cd ../jpf-core
        mkdir -p build/libs
        cp build/jpf.jar build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
        ls -la build/libs/
    
    - name: Create site.properties for CI
      run: |
        cd ../jpf-autodoc
        echo "jpf-core = ../jpf-core" > site.properties
        echo "Created site.properties:"
        cat site.properties
    
    - name: Verify jpf-core JAR exists
      run: |
        ls -la ../jpf-core/build/libs/
        test -f ../jpf-core/build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run code quality checks
      run: ./gradlew checkstyleMain checkstyleTest
    
    - name: Run security scan
      run: ./gradlew dependencyCheckAnalyze
    
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  archive-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    
    - name: Clone jpf-core
      run: |
        cd ..
        git clone https://github.com/javapathfinder/jpf-core.git
        cd jpf-core
        chmod +x gradlew
        ls -la
    
    - name: Build jpf-core
      run: |
        cd ../jpf-core
        pwd
        ls -la
        ./gradlew buildJars --info
    
    - name: Check jpf-core build output
      run: |
        cd ../jpf-core
        echo "=== Build directory contents ==="
        ls -la build/
        echo "=== Available JAR files ==="
        find build/ -name "*.jar" -type f
    
    - name: Copy jpf-core JAR to expected location
      run: |
        cd ../jpf-core
        mkdir -p build/libs
        cp build/jpf.jar build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
        ls -la build/libs/
    
    - name: Create site.properties for CI
      run: |
        cd ../jpf-autodoc
        echo "jpf-core = ../jpf-core" > site.properties
        echo "Created site.properties:"
        cat site.properties
    
    - name: Verify jpf-core JAR exists
      run: |
        ls -la ../jpf-core/build/libs/
        test -f ../jpf-core/build/libs/jpf-core-DEVELOPMENT-SNAPSHOT.jar
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build project
      run: ./gradlew build
    
    - name: Test archive functionality
      run: |
        # Create test JAR file
        mkdir -p test-archive/META-INF
        echo "Manifest-Version: 1.0" > test-archive/META-INF/MANIFEST.MF
        echo "Main-Class: gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI" >> test-archive/META-INF/MANIFEST.MF
        
        # Test JAR analysis
        ./bin/jpfautodoc -cp test-archive --config-only -o markdown -f test-output.md
        
        # Verify output was created
        test -f test-output.md && echo "Archive test passed" || exit 1 