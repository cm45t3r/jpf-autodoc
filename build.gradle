plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    mainClass = 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
}

repositories {
    mavenCentral()
    flatDir {
        // Multiple possible locations for jpf-core JAR
        dirs = [
            // Default location (parent directory)
            '../jpf-core/build/libs',
            // Alternative locations
            '../jpf-core/build',
            './jpf-core/build/libs',
            './jpf-core/build',
            // Custom location via system property
            System.getProperty('jpf.core.path', '') + '/build/libs',
            System.getProperty('jpf.core.path', '') + '/build'
        ].findAll { it && new File(it).exists() }
    }
}

dependencies {
    // Core dependencies
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'info.picocli:picocli:4.7.3'

    // JPF dependencies
    implementation name: 'jpf-core-DEVELOPMENT-SNAPSHOT'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI',
            'Implementation-Title': 'JPF AutoDoc',
            'Implementation-Version': '1.0.0-SNAPSHOT'
        )
    }
}

task createExecutableJar(type: Jar) {
    archiveClassifier = 'executable'
    manifest {
        attributes 'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
} 