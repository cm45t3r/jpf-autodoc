/*
 * Copyright (C) 2025, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * The Java Pathfinder AutoDoc tool is licensed under the
 * Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
}

group = 'gov.nasa.jpf'
version = '1.0.0-SNAPSHOT'
description = 'Unified JPF documentation generation tool'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    
    // Use Java 11 toolchain for compilation (compatible with Gradle 9.0)
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    mainClass = 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
}

// Function to get jpf-core paths from site.properties (optional)
def getJpfCorePathsFromSiteProperties() {
    def jpfCorePaths = []
    
    def sitePropertiesLocations = [
        '../site.properties',
        System.getProperty('user.home') + '/.jpf/site.properties'
    ]
    
    sitePropertiesLocations.each { location ->
        def file = new File(location)
        if (file.exists()) {
            try {
                def props = new Properties()
                file.withInputStream { props.load(it) }
                def jpfCorePath = props.getProperty('jpf-core')
                if (jpfCorePath) {
                    // Resolve variables
                    jpfCorePath = jpfCorePath.replace('${user.home}', System.getProperty('user.home'))
                    jpfCorePath = jpfCorePath.replace('${jpf-core}', '')
                    jpfCorePath = jpfCorePath.trim()
                    
                    if (jpfCorePath) {
                        jpfCorePaths.add(jpfCorePath + '/build/libs')
                        jpfCorePaths.add(jpfCorePath + '/build')
                    }
                }
            } catch (Exception e) {
                // Ignore site.properties errors - it's optional
                println "Warning: Could not read site.properties from ${location}: ${e.message}"
            }
        }
    }
    
    return jpfCorePaths
}

repositories {
    mavenCentral()
    mavenLocal()
    
    // Use maven repository for local dependencies instead of flatDir
    def sitePropertiesPaths = getJpfCorePathsFromSiteProperties()
    if (!sitePropertiesPaths.isEmpty()) {
        maven {
            url = uri(sitePropertiesPaths.first())
            name = 'jpf-core-local'
        }
    }
    
    // Fallback to local directories if needed
    def localDirs = [
        '../jpf-core/build/libs',
        '../jpf-core/build',
        './jpf-core/build/libs',
        './jpf-core/build',
        System.getProperty('jpf.core.path', '') + '/build/libs',
        System.getProperty('jpf.core.path', '') + '/build'
    ].findAll { it && new File(it).exists() }
    
    if (!localDirs.isEmpty()) {
        maven {
            url = uri(localDirs.first())
            name = 'jpf-core-fallback'
        }
    }
}

dependencies {
    // Core dependencies
    implementation 'info.picocli:picocli:4.7.3'

    // Jackson dependencies for enhanced output formats
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // JPF dependencies (optional - build will work without jpf-core)
    // compileOnly 'gov.nasa.jpf:jpf-core:DEV-SNAPSHOT'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI',
            'Implementation-Title': 'JPF AutoDoc',
            'Implementation-Version': '1.0.0-SNAPSHOT'
        )
    }
}

task createExecutableJar(type: Jar) {
    archiveClassifier = 'executable'
    manifest {
        attributes 'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to check Gradle 9.0 compatibility
task checkGradleCompatibility {
    group = 'verification'
    description = 'Checks Gradle 9.0 compatibility and Java toolchain configuration'
    
    doLast {
        println "🔍 Gradle 9.0 Compatibility Check"
        println "================================="
        
        // Check Gradle version
        def gradleVersion = gradle.gradleVersion
        println "📦 Gradle Version: $gradleVersion"
        
        // Check JVM versions
        def runtimeJava = System.getProperty('java.version')
        def runtimeJavaSpec = System.getProperty('java.specification.version')
        println "🔧 Gradle Daemon JVM: Java $runtimeJava (spec: $runtimeJavaSpec)"
        
        // Check if running on JVM 17+
        def majorVersion = Integer.parseInt(runtimeJavaSpec.split('\\.')[0])
        if (majorVersion >= 17) {
            println "✅ Gradle daemon is running on Java $majorVersion (compatible with Gradle 9.0)"
        } else {
            println "❌ Gradle daemon is running on Java $majorVersion (requires Java 17+ for Gradle 9.0)"
            println "💡 Run setup-gradle.sh to fix this automatically"
        }
        
        // Check toolchain configuration
        if (java.toolchain.languageVersion.isPresent()) {
            def toolchainVersion = java.toolchain.languageVersion.get().asInt()
            println "🛠️ Project Toolchain: Java $toolchainVersion"
            if (toolchainVersion == 11) {
                println "✅ Project will compile with Java 11 as expected"
            }
        } else {
            println "⚠️ No toolchain configured"
        }
        
        println ""
        println "📚 For setup instructions, see README_GRADLE_SETUP.md"
    }
} 