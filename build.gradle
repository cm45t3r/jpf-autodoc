plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

version = '1.0.0-SNAPSHOT'
group = 'gov.nasa.jpf'

application {
    mainClass = 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
}

repositories {
    mavenCentral()
    flatDir {
        dirs '../jpf-core/build/libs'
    }
}

dependencies {
    // Core dependencies
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'info.picocli:picocli:4.7.3'
    
    // JPF dependencies (optional for now)
    // implementation files('../jpf-core/build/libs/jpf.jar')
    // implementation files('../jpf-core/build/libs/jpf-classes.jar')
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI',
            'Implementation-Title': 'JPF AutoDoc',
            'Implementation-Version': version,
            'Implementation-Vendor': 'NASA Ames Research Center'
        )
    }
}

// Create executable JAR with dependencies
task createExecutableJar(type: Jar) {
    archiveClassifier = 'executable'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Make build depend on executable JAR
build.dependsOn createExecutableJar 