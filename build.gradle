/*
 * Copyright (C) 2025, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * The Java Pathfinder AutoDoc tool is licensed under the
 * Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
}

group = 'gov.nasa.jpf'
version = '1.0.0-SNAPSHOT'
description = 'Unified JPF documentation generation tool'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    mainClass = 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
}

// Function to get jpf-core paths from site.properties (optional)
def getJpfCorePathsFromSiteProperties() {
    def jpfCorePaths = []
    
    def sitePropertiesLocations = [
        '../site.properties',
        System.getProperty('user.home') + '/.jpf/site.properties'
    ]
    
    sitePropertiesLocations.each { location ->
        def file = new File(location)
        if (file.exists()) {
            try {
                def props = new Properties()
                file.withInputStream { props.load(it) }
                def jpfCorePath = props.getProperty('jpf-core')
                if (jpfCorePath) {
                    // Resolve variables
                    jpfCorePath = jpfCorePath.replace('${user.home}', System.getProperty('user.home'))
                    jpfCorePath = jpfCorePath.replace('${jpf-core}', '')
                    jpfCorePath = jpfCorePath.trim()
                    
                    if (jpfCorePath) {
                        jpfCorePaths.add(jpfCorePath + '/build/libs')
                        jpfCorePaths.add(jpfCorePath + '/build')
                    }
                }
            } catch (Exception e) {
                // Ignore site.properties errors - it's optional
                println "Warning: Could not read site.properties from ${location}: ${e.message}"
            }
        }
    }
    
    return jpfCorePaths
}

repositories {
    mavenCentral()
    flatDir {
        // Get jpf-core paths from site.properties first (optional)
        def sitePropertiesPaths = getJpfCorePathsFromSiteProperties()
        
        // Multiple possible locations for jpf-core JAR
        dirs = [
            // Site.properties locations (highest priority, if available)
            *sitePropertiesPaths,
            // Default location (parent directory)
            '../jpf-core/build/libs',
            // Alternative locations
            '../jpf-core/build',
            './jpf-core/build/libs',
            './jpf-core/build',
            // Custom location via system property
            System.getProperty('jpf.core.path', '') + '/build/libs',
            System.getProperty('jpf.core.path', '') + '/build'
        ].findAll { it && new File(it).exists() }
    }
}

dependencies {
    // Core dependencies
    implementation 'info.picocli:picocli:4.7.3'

    // Optional Jackson dependencies for enhanced output formats
    // These are optional and the build will work without them
    compileOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // Runtime dependencies for Jackson (only if available)
    runtimeOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    runtimeOnly 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // JPF dependencies (optional - build will work without jpf-core)
    compileOnly name: 'jpf-core-DEVELOPMENT-SNAPSHOT'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI',
            'Implementation-Title': 'JPF AutoDoc',
            'Implementation-Version': '1.0.0-SNAPSHOT'
        )
    }
}

task createExecutableJar(type: Jar) {
    archiveClassifier = 'executable'
    manifest {
        attributes 'Main-Class': 'gov.nasa.jpf.autodoc.cli.JPFAutoDocCLI'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
} 